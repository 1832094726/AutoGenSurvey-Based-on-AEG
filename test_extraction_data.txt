[
  {
    "algorithm_entity": {
      "algorithm_id": "ARIS_2014",
      "entity_type": "Algorithm",
      "name": "ARIS",
      "year": 2014,
      "authors": [
        "Roy et al."
      ],
      "task": "Arithmetic Word Problem Solving",
      "dataset": [
        "AI2"
      ],
      "metrics": [
        "Accuracy"
      ],
      "architecture": {
        "components": [
          "Logic Template (State)"
        ],
        "connections": [
          "Verb Categorization"
        ],
        "mechanisms": [
          "Simple Reasoning"
        ]
      },
      "methodology": {
        "training_strategy": [
          "Manual Annotation of Logic Templates"
        ],
        "parameter_tuning": []
      },
      "feature_processing": [
        "Entities, Quantities, Relations"
      ]
    }
  },
  {
    "algorithm_entity": {
      "algorithm_id": "Schema_2015",
      "entity_type": "Algorithm",
      "name": "Schema",
      "year": 2015,
      "authors": [
        "Mitra et al."
      ],
      "task": "Arithmetic Word Problem Solving",
      "dataset": [
        "AI2"
      ],
      "metrics": [
        "Accuracy"
      ],
      "architecture": {
        "components": [
          "Part Whole, Change, Comparison Formulas"
        ],
        "connections": [
          "Log-linear Model"
        ],
        "mechanisms": [
          "Template Matching"
        ]
      },
      "methodology": {
        "training_strategy": [
          "Customized Feature Selection"
        ],
        "parameter_tuning": []
      },
      "feature_processing": [
        "Assertions to Formulas"
      ]
    }
  },
  {
    "algorithm_entity": {
      "algorithm_id": "LogicForm_2016",
      "entity_type": "Algorithm",
      "name": "LogicForm",
      "year": 2016,
      "authors": [
        "Mitra et al."
      ],
      "task": "Arithmetic Word Problem Solving",
      "dataset": [
        "AI2"
      ],
      "metrics": [
        "Accuracy"
      ],
      "architecture": {
        "components": [
          "Logic Forms"
        ],
        "connections": [
          "Mapping Rules"
        ],
        "mechanisms": [
          "Logic Inference"
        ]
      },
      "methodology": {
        "training_strategy": [
          "Predefined Corpus of Logic Representation"
        ],
        "parameter_tuning": []
      },
      "feature_processing": [
        "Verbs, Subjects, Objects, Numbers"
      ]
    }
  },
  {
    "dataset_entity": {
      "dataset_id": "IL_2015",
      "entity_type": "Dataset",
      "name": "IL",
      "year": 2015,
      "domain": "Arithmetic Word Problems",
      "size": "562 problems",
      "characteristics": [
        "Single-step Problems",
        "Addition, Subtraction, Multiplication, Division"
      ]
    }
  },
  {
    "dataset_entity": {
      "dataset_id": "CC_2015",
      "entity_type": "Dataset",
      "name": "CC",
      "year": 2015,
      "domain": "Arithmetic Word Problems",
      "size": "600 problems",
      "characteristics": [
        "Multi-step Problems",
        "No Irrelevant Quantities",
        "Addition, Subtraction, Multiplication, Division"
      ]
    }
  },
  {
    "metric_entity": {
      "metric_id": "Accuracy_2014",
      "entity_type": "Metric",
      "name": "Accuracy",
      "description": "Proportion of correctly solved math word problems",
      "formula": "Correct Predictions / Total Predictions",
      "value_range": "[0, 1]",
      "interpretation": "Higher values indicate better performance"
    }
  }
]

EXTRACTION_COMPLETE: true

为了提供准确的JSON格式输出，我将基于提供的文档内容和已知实体信息，分析并构建这些实体之间的演化关系。以下是详细的分析结果：

### 实体关系分析

#### 1. **ALGES** 和 **ExpressionTree**
- **关系类型**: 改进 (Improve)
- **结构**: Architecture.Component
- **详细说明**: ALGES采用了更暴力的方法来枚举所有可能的方程树，而ExpressionTree则通过束搜索减少搜索空间。
- **证据**: 文档中提到"ALGES does not discard irrevalent quantities, but enumerates all the syntactically valid trees"，而ExpressionTree采用束搜索策略。
- **置信度**: 0.95

```json
[
  {
    "from_entities": [
      {
        "entity_id": "ALGES",
        "entity_type": "Algorithm"
      }
    ],
    "to_entities": [
      {
        "entity_id": "ExpressionTree",
        "entity_type": "Algorithm"
      }
    ],
    "relation_type": "Improve",
    "structure": "Architecture.Component",
    "detail": "ALGES adopts a more brute-force manner to exploit all possible equation trees, while ExpressionTree reduces the search space using beam search.",
    "evidence": "ALGES does not discard irrevalent quantities, but enumerates all the syntactically valid trees",
    "confidence": 0.95
  },
  {
    "from_entities": [
      {
        "entity_id": "Deep Neural Solver (DNS)",
        "entity_type": "Algorithm"
      }
    ],
    "to_entities": [
      {
        "entity_id": "Math23K",
        "entity_type": "Dataset"
      }
    ],
    "relation_type": "Use",
    "structure": "Evaluation.Dataset",
    "detail": "DNS uses the Math23K dataset for experimental evaluation.",
    "evidence": "we implemented our own version of DNS and evaluated its performance on the large dataset",
    "confidence": 0.95
  }
]
```

EXTRACTION_COMPLETE: true 